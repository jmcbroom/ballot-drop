{"version":3,"sources":["DropOffMap.js","App.js","serviceWorker.js","index.js"],"names":["DropOffMap","address","setAddress","setFiltered","useState","theMap","setTheMap","theGeocoder","setTheGeocoder","useEffect","mapboxgl","accessToken","map","Map","container","style","center","zoom","geocoder","MapboxGeocoder","countries","types","bbox","flyTo","placeholder","addControl","on","e","result","console","log","place_name","split","city","filtered","locations","features","filter","l","properties","City","trim","getSource","setData","fc","type","push","fitBounds","padding","maxZoom","setLayoutProperty","district","addSource","data","addLayer","id","source","paint","stops","layout","visibility","clear","width","height","Location","feature","className","App","icon","faVoteYea","size","addr","addressMessage","onClick","length","f","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"i98DA8IeA,EAtII,SAAC,GAA0C,IAAxCC,EAAuC,EAAvCA,QAASC,EAA8B,EAA9BA,WAAYC,EAAkB,EAAlBA,YAAkB,EAE7BC,mBAAS,MAFoB,mBAElDC,EAFkD,KAE1CC,EAF0C,OAGnBF,mBAAS,MAHU,mBAGlDG,EAHkD,KAGrCC,EAHqC,KA+HzD,OA1HAC,qBAAU,WACNC,IAASC,YACL,6FACJ,IAAIC,EAAM,IAAIF,IAASG,IAAI,CACvBC,UAAW,MACXC,MAAO,qDACPC,OAAQ,EAAE,SAAU,QACpBC,KAAM,IAGJC,EAAW,IAAIC,IAAe,CAChCR,YAAaD,IAASC,YACtBD,SAAUA,IACVU,UAAW,KACXC,MAAO,UACPC,KAAM,EAAE,UAAW,WAAY,UAAW,WAC1CC,OAAO,EACPC,YAAY,uBAGhBZ,EAAIa,WAAWP,EAAU,YAEzBA,EAASQ,GAAG,UAAU,SAAAC,GAClBzB,EAAWyB,EAAEC,QACbC,QAAQC,IAAIH,EAAEC,QAFS,MAGKD,EAAEC,OAAOG,WAAWC,MAAM,KAH/B,iBAGZC,GAHY,WAInBC,GAJmB,WAIRC,EAAUC,SAASC,QAAO,SAAAC,GAAC,OAAIA,EAAEC,WAAWC,OAASP,EAAKQ,WACzEtC,EAAY+B,GACZtB,EAAI8B,UAAU,aAAaC,QAAQ,CAAE,KAAQ,oBAAqBP,SAAUF,IAC5E,IAAIU,EAAK,CAAEC,KAAM,oBAAqBT,SAAUF,GAChDU,EAAGR,SAASU,KAAKnB,EAAEC,QACnBhB,EAAImC,UAAUzB,IAAKsB,GAAK,CAAEI,QAAS,GAAIC,QAAS,KAChDrC,EAAIsC,kBAAkB,kBAAmB,aAAc,cAI3DtC,EAAIc,GAAG,QAAQ,SAAAC,GAEXf,EAAImC,UAAUzB,IAAK6B,GAAW,CAAEH,QAAS,KACzC1C,EAAUM,GACVJ,EAAeU,GAEfN,EAAIwC,UAAU,WAAY,CACtBP,KAAM,UACNQ,KAAMF,IAGVvC,EAAI0C,SAAS,CACTC,GAAI,gBACJC,OAAQ,WACRX,KAAM,OACNY,MAAO,CACH,aAAc,mBAItB7C,EAAI0C,SAAS,CACTC,GAAI,gBACJC,OAAQ,WACRX,KAAM,OACNY,MAAO,CACH,aAAc,qBAEnB,cAGH7C,EAAIwC,UAAU,YAAa,CACvBP,KAAM,UACNQ,KAAMlB,IAGVvB,EAAI0C,SAAS,CACTC,GAAI,mBACJV,KAAM,SACNW,OAAQ,YACRC,MAAO,CACH,gBAAiB,CACbC,MAAO,CAAC,CAAC,EAAG,IAAK,CAAC,GAAI,MAE1B,eAAgB,yBAChB,sBAAuB,kBACvB,sBAAuB,KAG/B9C,EAAI0C,SAAS,CACTC,GAAI,iBACJV,KAAM,SACNW,OAAQ,YACRG,OAAQ,CACJ,aAAc,eACd,sBAAsB,KAI9B/C,EAAI0C,SAAS,CACTC,GAAI,kBACJV,KAAM,SACNW,OAAQ,YACRG,OAAQ,CACJC,WAAY,OACZ,aAAc,CAAC,MAAO,iBACtB,YAAa,CAAC,iBACd,cAAe,CACXF,MAAO,CAAC,CAAC,GAAI,CAAC,EAAG,OAAQ,CAAC,GAAI,CAAC,EAAG,SAEtC,uBAAwB,IACxB,YAAa,CACTA,MAAO,CAAC,CAAC,GAAI,IAAK,CAAC,GAAI,cAKxC,IAEHjD,qBAAU,WACFJ,GAAUE,GAA2B,OAAZN,IACzBM,EAAYsD,QACZxD,EAAOqC,UAAU,aAAaC,QAAQR,GACtC9B,EAAO6C,kBAAkB,kBAAmB,aAAc,QAC1D7C,EAAO0C,UAAUzB,IAAK6B,GAAW,CAAEH,QAAS,QAEjD,CAAC/C,IAEA,iCACI,yBAAKsD,GAAG,MAAMxC,MAAO,CAAE+C,MAAO,QAASC,OAAQ,S,gBC9HrDC,EAAW,SAAC,GAAiB,IAAfC,EAAc,EAAdA,QAClB,OACE,6BAASC,UAAU,wBACjB,wBAAIA,UAAU,8BAA8BD,EAAQ1B,WAAW,kBAC/D,uCAAY,2BAAI0B,EAAQ1B,WAAW,oBACnC,0CAAe,2BAAI0B,EAAQ1B,WAAR,UA8CV4B,MAzCf,WAAgB,IAAD,EAEiB/D,mBAAS,MAF1B,mBAENH,EAFM,KAEGC,EAFH,OAGmBE,mBAAS,IAH5B,mBAGN8B,EAHM,KAGI/B,EAHJ,KAOb,OAFA0B,QAAQC,IAAI7B,GAGV,6BACE,4BAAQiE,UAAU,sDAChB,kBAAC,IAAD,CAAiBE,KAAMC,IAAWC,KAAK,OACvC,wBAAIJ,UAAU,yBAAd,2CAEF,kBAAC,EAAD,CAAYhE,WAAYA,EAAYD,QAASA,EAASE,YAAaA,IACnE,6BAAS+D,UAAU,wFACfjE,EAEA,oCAhCa,SAACA,GAAa,IAAD,EACJA,EAAQ8B,WAAWC,MAAM,KADrB,iBAC3BuC,EAD2B,KACrBtC,EADqB,gBAElC,OAAO,8DAAmC,2BAAIsC,GAAvC,OAAoD,2BAAItC,GAAxD,KA+BIuC,CAAevE,GAChB,4BACEiE,UAAU,+IACVO,QAAS,WAAQvE,EAAW,MAAOC,EAAY,MAFjD,UAHF,wBAAI+D,UAAU,WAAU,iDAAxB,+CAUHhC,EAASwC,OAAS,GACjB,6BAASR,UAAU,mBACjB,wBAAIA,UAAU,gBACS,IAApBhC,EAASwC,OAAT,8DAAiFxC,EAASwC,OAA1F,sDAEFxC,EAAStB,KAAI,SAAA+D,GAAC,OACb,kBAAC,EAAD,CAAUV,QAASU,QAIzB,+BC7CcC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCVNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDuHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLhE,QAAQgE,MAAMA,EAAMC,c","file":"static/js/main.ab07420e.chunk.js","sourcesContent":["import React, { useState, useEffect } from 'react';\nimport mapboxgl from 'mapbox-gl'\nimport MapboxGeocoder from '@mapbox/mapbox-gl-geocoder';\nimport '@mapbox/mapbox-gl-geocoder/dist/mapbox-gl-geocoder.css';\nimport bbox from '@turf/bbox'\nimport locations from './drop_off_locations.json'\nimport district from './district.json'\n\nconst DropOffMap = ({ address, setAddress, setFiltered }) => {\n\n    const [theMap, setTheMap] = useState(null)\n    const [theGeocoder, setTheGeocoder] = useState(null)\n\n    useEffect(() => {\n        mapboxgl.accessToken =\n            \"pk.eyJ1Ijoiam1jYnJvb20iLCJhIjoiY2s2c3JubGd5MGFtNDNncm0yaWNmaWFpciJ9.Jmw14y-b00Q_j0UIxFmMmw\";\n        var map = new mapboxgl.Map({\n            container: \"map\",\n            style: \"mapbox://styles/jmcbroom/ck7va71n90bf51jmj0r3n2a7d\",\n            center: [-83.03777, 42.376],\n            zoom: 9\n        });\n\n        const geocoder = new MapboxGeocoder({\n            accessToken: mapboxgl.accessToken,\n            mapboxgl: mapboxgl,\n            countries: 'US',\n            types: 'address',\n            bbox: [-83.430038, 42.179439, -82.961926, 42.444748],\n            flyTo: false,\n            placeholder: `Enter your address`\n        })\n\n        map.addControl(geocoder, 'top-left')\n\n        geocoder.on('result', e => {\n            setAddress(e.result)\n            console.log(e.result)\n            let [addr, city, ...rest] = e.result.place_name.split(\",\")\n            let filtered = locations.features.filter(l => l.properties.City === city.trim())\n            setFiltered(filtered)\n            map.getSource(\"locations\").setData({ \"type\": \"FeatureCollection\", features: filtered })\n            let fc = { type: \"FeatureCollection\", features: filtered }\n            fc.features.push(e.result)\n            map.fitBounds(bbox(fc), { padding: 50, maxZoom: 15 })\n            map.setLayoutProperty('locations-label', 'visibility', 'visible')\n\n        })\n\n        map.on(\"load\", e => {\n\n            map.fitBounds(bbox(district), { padding: 25 })\n            setTheMap(map)\n            setTheGeocoder(geocoder)\n\n            map.addSource(\"district\", {\n                type: 'geojson',\n                data: district\n            })\n\n            map.addLayer({\n                id: \"district-line\",\n                source: \"district\",\n                type: 'line',\n                paint: {\n                    \"line-color\": 'rgba(0,0,0,1)'\n                }\n            })\n\n            map.addLayer({\n                id: \"district-fill\",\n                source: \"district\",\n                type: 'fill',\n                paint: {\n                    \"fill-color\": 'rgba(0,0,0,0.05)'\n                }\n            }, 'road-label')\n\n\n            map.addSource(\"locations\", {\n                type: \"geojson\",\n                data: locations\n            })\n\n            map.addLayer({\n                id: \"locations-circle\",\n                type: 'circle',\n                source: \"locations\",\n                paint: {\n                    \"circle-radius\": {\n                        stops: [[9, 10], [19, 10]]\n                    },\n                    \"circle-color\": 'rgba(255,255,255,0.75)',\n                    \"circle-stroke-color\": 'rgba(0,0,0,0.9)',\n                    \"circle-stroke-width\": 2\n                }\n            })\n            map.addLayer({\n                id: \"locations-icon\",\n                type: 'symbol',\n                source: \"locations\",\n                layout: {\n                    \"icon-image\": 'town-hall-11',\n                    \"icon-allow-overlap\": true\n                }\n            })\n\n            map.addLayer({\n                id: \"locations-label\",\n                type: 'symbol',\n                source: 'locations',\n                layout: {\n                    visibility: 'none',\n                    \"text-field\": [\"get\", \"Location Name\"],\n                    \"text-font\": [\"Inter Regular\"],\n                    \"text-offset\": {\n                        stops: [[10, [0, 2.75]], [15, [0, 1.75]]]\n                    },\n                    \"text-letter-spacing\": -0.02,\n                    \"text-size\": {\n                        stops: [[11, 10], [15, 20]]\n                    }\n                }\n            })\n        });\n    }, []);\n\n    useEffect(() => {\n        if (theMap && theGeocoder && address === null) {\n            theGeocoder.clear()\n            theMap.getSource(\"locations\").setData(locations)\n            theMap.setLayoutProperty('locations-label', 'visibility', 'none')\n            theMap.fitBounds(bbox(district), { padding: 50 })\n        }\n    }, [address])\n    return (\n        <section>\n            <div id=\"map\" style={{ width: '100vw', height: 500 }} />\n        </section>\n    )\n}\n\nexport default DropOffMap","import React, { useState } from 'react';\nimport DropOffMap from './DropOffMap';\n\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome'\nimport { faVoteYea } from '@fortawesome/free-solid-svg-icons'\n\nconst addressMessage = (address) => {\n  const [addr, city, ...rest] = address.place_name.split(',')\n  return <h2>Showing drop-off locations for <b>{addr}</b> in <b>{city}</b>.</h2>\n}\n\nconst Location = ({ feature }) => {\n  return (\n    <section className=\"p-2 bg-blue-200 mb-2\">\n      <h3 className=\"text-xl font-semibold mb-1\">{feature.properties[\"Location Name\"]}</h3>\n      <p>Address: <b>{feature.properties['Street Address']}</b></p>\n      <p>Open Hours: <b>{feature.properties['Hours']}</b></p>\n    </section>\n  )\n}\n\nfunction App() {\n\n  const [address, setAddress] = useState(null)\n  const [filtered, setFiltered] = useState([])\n\n  console.log(address)\n\n  return (\n    <div>\n      <header className=\"flex content-between items-center px-3 bg-blue-200\">\n        <FontAwesomeIcon icon={faVoteYea} size=\"lg\"/>\n        <h1 className=\"text-lg font-bold m-2\">MI-13 Absentee Ballot Drop-Off Locator</h1>\n      </header>\n      <DropOffMap setAddress={setAddress} address={address} setFiltered={setFiltered} />\n      <section className=\"p-3 bg-blue-200 w-100 flex content-between justify-between align-middle items-center\">\n        {!address ?\n          <h2 className=\"text-xl\"><b>Enter your address</b> to look up your ballot drop-off location.</h2> :\n          <>\n            {addressMessage(address)}\n            <button\n              className=\"bg-transparent hover:bg-red-500 text-red-700 font-semibold hover:text-white py-1 px-2 border border-red-500 hover:border-transparent rounded\"\n              onClick={() => { setAddress(null); setFiltered([]) }}>\n              Reset\n            </button>\n          </>}\n      </section>\n      {filtered.length > 0 &&\n        <section className=\"p-3 bg-gray-200\">\n          <h2 className=\"text-xl mb-2\">\n            {filtered.length === 1 ? `Drop off your absentee ballot early at:` : `There are ${filtered.length} locations you can visit to drop off your ballot:`}\n          </h2>\n          {filtered.map(f => (\n            <Location feature={f} />\n          ))}\n\n        </section>}\n      <hr />\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport \"mapbox-gl/dist/mapbox-gl.css\";\nimport './tailwind.output.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}