{"version":3,"sources":["DropOffMap.js","App.js","serviceWorker.js","index.js"],"names":["DropOffMap","address","setAddress","city","setCity","setFiltered","useState","theMap","setTheMap","theGeocoder","setTheGeocoder","useEffect","mapboxgl","accessToken","map","Map","container","style","center","zoom","geocoder","MapboxGeocoder","countries","types","bbox","flyTo","placeholder","addControl","on","e","result","console","log","place_name","split","addrCity","filtered","locations","features","filter","l","properties","City","trim","setFilter","getSource","setData","fc","type","push","fitBounds","padding","maxZoom","setLayoutProperty","district","addSource","data","cities","centroids","addLayer","id","source","paint","layout","visibility","stops","clear","isSourceLoaded","width","height","Location","feature","actions","className","background","Type","Hours","a","Notes","App","Array","from","Set","sort","icon","faVoteYea","size","addr","addressMessage","onClick","for","value","onChange","target","c","length","f","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.d22bc82a.chunk.js","sourcesContent":["import React, { useState, useEffect } from 'react';\nimport mapboxgl from 'mapbox-gl'\nimport MapboxGeocoder from '@mapbox/mapbox-gl-geocoder';\nimport '@mapbox/mapbox-gl-geocoder/dist/mapbox-gl-geocoder.css';\nimport bbox from '@turf/bbox'\nimport locations from './drop_off_locs.json'\nimport district from './district.json'\nimport cities from './cities.json'\nimport centroids from './city_centroid.json'\n\nconst DropOffMap = ({ address, setAddress, city, setCity, setFiltered }) => {\n\n    const [theMap, setTheMap] = useState(null)\n    const [theGeocoder, setTheGeocoder] = useState(null)\n\n    useEffect(() => {\n        mapboxgl.accessToken =\n            \"pk.eyJ1Ijoiam1jYnJvb20iLCJhIjoiY2s2c3JubGd5MGFtNDNncm0yaWNmaWFpciJ9.Jmw14y-b00Q_j0UIxFmMmw\";\n        var map = new mapboxgl.Map({\n            container: \"map\",\n            style: \"mapbox://styles/jmcbroom/ck7va71n90bf51jmj0r3n2a7d\",\n            center: [-83.03777, 42.376],\n            zoom: 9\n        });\n\n        const geocoder = new MapboxGeocoder({\n            accessToken: mapboxgl.accessToken,\n            mapboxgl: mapboxgl,\n            countries: 'US',\n            types: 'address',\n            bbox: [-83.430038, 42.179439, -82.961926, 42.444748],\n            flyTo: false,\n            placeholder: `Enter your address`\n        })\n\n        map.addControl(geocoder, 'top-left')\n\n        geocoder.on('result', e => {\n            setCity(null)\n            setAddress(e.result)\n            console.log(e.result)\n            let [addr, addrCity, ...rest] = e.result.place_name.split(\",\")\n            let filtered = locations.features.filter(l => l.properties.City === addrCity.trim())\n            setFiltered(filtered)\n            setCity(addrCity)\n            map.setFilter(\"cities-fill\", ['==', 'Label2', addrCity])\n            map.getSource(\"locations\").setData({ \"type\": \"FeatureCollection\", features: filtered })\n            let fc = { type: \"FeatureCollection\", features: filtered }\n            fc.features.push(e.result)\n            map.fitBounds(bbox(fc), { padding: 50, maxZoom: 15 })\n            map.setLayoutProperty('locations-label', 'visibility', 'visible')\n            map.setLayoutProperty('locations-icon', 'visibility', 'visible')\n            map.setLayoutProperty('locations-circle', 'visibility', 'visible')\n        })\n\n        map.on(\"load\", e => {\n\n            map.fitBounds(bbox(district), { padding: 25 })\n            setTheMap(map)\n            setTheGeocoder(geocoder)\n\n            map.addSource(\"district\", {\n                type: 'geojson',\n                data: district\n            })\n\n            map.addSource(\"cities\", {\n              type: 'geojson',\n              data: cities\n            })\n\n            map.addSource(\"city-points\", {\n              type: 'geojson',\n              data: centroids\n            })\n\n            // map.addLayer({\n            //     id: \"district-line\",\n            //     source: \"district\",\n            //     type: 'line',\n            //     paint: {\n            //         \"line-color\": 'rgba(0,0,0,1)'\n            //     }\n            // })\n\n            map.addLayer({\n                id: \"cities-line\",\n                source: \"cities\",\n                type: 'line',\n                paint: {\n                    \"line-color\": 'rgba(0,0,0,0.25)'\n                }\n            })\n\n            map.addLayer({\n                id: \"cities-fill\",\n                source: \"cities\",\n                filter: [\"==\", [\"get\", \"Label2\"], \"\"],\n                type: 'fill',\n                paint: {\n                    \"fill-color\": 'rgba(100,0,0,0.05)'\n                }\n            })\n\n            map.addLayer({\n              id: \"cities-label\",\n              type: 'symbol',\n              source: 'city-points',\n              paint: {\n                \"text-halo-color\": \"white\",\n                \"text-halo-width\": 1,\n                \"text-color\": \"rgba(0,0,0,0.75)\"\n              },\n              layout: {\n                  visibility: 'visible',\n                  \"text-field\": [\"get\", \"Label2\"],\n                  \"text-font\": [\"Inter Regular\"],\n                  \"text-size\": {\n                      stops: [[11, 12], [15, 20]]\n                  },\n                  \"text-max-width\": 2,\n              }\n          })\n\n            map.addLayer({\n                id: \"district-fill\",\n                source: \"district\",\n                type: 'fill',\n                paint: {\n                    \"fill-color\": 'rgba(0,0,0,0.05)'\n                }\n            }, 'road-label')\n\n\n            map.addSource(\"locations\", {\n                type: \"geojson\",\n                data: {type: \"FeatureCollection\", features: []}\n            })\n\n            map.addLayer({\n                id: \"locations-circle\",\n                type: 'circle',\n                source: \"locations\",\n                layout: {\n                  visibility: \"none\"\n                },\n                paint: {\n                    \"circle-radius\": {\n                        stops: [[9, 10], [19, 10]]\n                    },\n                    \"circle-color\": 'rgba(255,255,255,0.75)',\n                    \"circle-stroke-color\": 'rgba(0,0,0,0.9)',\n                    \"circle-stroke-width\": 2\n                }\n            })\n            map.addLayer({\n                id: \"locations-icon\",\n                type: 'symbol',\n                source: \"locations\",\n                layout: {\n                    \"icon-image\": 'town-hall-11',\n                    \"icon-allow-overlap\": true,\n                    visibility: \"none\"\n                }\n            })\n\n            map.addLayer({\n                id: \"locations-label\",\n                type: 'symbol',\n                source: 'locations',\n                layout: {\n                    visibility: 'none',\n                    \"text-field\": [\"get\", \"Location Name\"],\n                    \"text-font\": [\"Inter Regular\"],\n                    \"text-offset\": {\n                        stops: [[10, [0, 2.75]], [15, [0, 1.75]]]\n                    },\n                    \"text-letter-spacing\": -0.02,\n                    \"text-size\": {\n                        stops: [[11, 10], [15, 20]]\n                    }\n                }\n            })\n        });\n    }, []);\n\n    useEffect(() => {\n        if (theMap && theGeocoder && address === null) {\n            theGeocoder.clear()\n            theMap.getSource(\"locations\").setData(locations)\n            theMap.setLayoutProperty('locations-label', 'visibility', 'none')\n            theMap.setLayoutProperty('locations-icon', 'visibility', 'none')\n            theMap.setLayoutProperty('locations-circle', 'visibility', 'none')\n\n            theMap.fitBounds(bbox(district), { padding: 50 })\n        }\n    }, [address, theMap, theGeocoder])\n\n    useEffect(() => {\n      if (theMap && city && theMap.isSourceLoaded(\"locations\")) {\n        let filtered = locations.features.filter(l => l.properties.City === city.trim())\n        setFiltered(filtered)\n        theMap.getSource(\"locations\").setData({ \"type\": \"FeatureCollection\", features: filtered })\n        let fc = { type: \"FeatureCollection\", features: filtered }\n        theMap.fitBounds(bbox(fc), { padding: 50, maxZoom: 15 })\n        theMap.setLayoutProperty('locations-label', 'visibility', 'visible')\n        theMap.setLayoutProperty('locations-icon', 'visibility', 'visible')\n        theMap.setLayoutProperty('locations-circle', 'visibility', 'visible')\n        theMap.setFilter(\"cities-fill\", ['==', 'Label2', city])\n      }\n    }, [city, theMap])\n\n    return (\n        <section>\n            <div id=\"map\" style={{ width: '100vw', height: 500 }} />\n        </section>\n    )\n}\n\nexport default DropOffMap","import React, { useState } from 'react';\nimport DropOffMap from './DropOffMap';\n\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome'\nimport { faVoteYea } from '@fortawesome/free-solid-svg-icons'\n\nimport locations from './drop_off_locs.json'\n\nconst addressMessage = (address) => {\n  const [addr, city, ...rest] = address.place_name.split(',')\n  return <h2>Showing drop-off locations for <b>{addr}</b> in <b>{city}</b>.</h2>\n}\n\nconst Location = ({ feature }) => {\n  const actions = []\n\n  if (feature.properties['Register to Vote'] === 'X') { actions.push(\"Register to Vote\")}\n  if (feature.properties['Get an Absentee Ballot'] === 'X') { actions.push(\"Get an Absentee Ballot\")}\n  if (feature.properties['Drop Off Absentee Ballot'] === 'X') { actions.push(\"Drop Off Absentee Ballot\")}\n  return (\n    <section className=\"mb-2\" style={{background: `RGBA(4, 96, 186, 0.5)`}}>\n      <h3 className=\"text-xl font-extrabold p-2 bg-gray-600 text-white\">{feature.properties[\"Location Name\"]} - {feature.properties['Street Address']}</h3>\n      <div className=\"px-3 py-2 bg-gray-200\">\n        <p className=\"text-lg\">This location is a <b>{feature.properties.Type}</b></p>\n        <p className=\"text-lg\">This location is open: <b>{feature.properties.Hours}</b></p>\n        <ul className=\"list-disc list-inside\">\n          {actions.map(a => <li>{a}</li>)}\n        </ul>\n        <p className=\"mt-1 italic\">{feature.properties.Notes}</p>\n      </div>\n    </section>\n  )\n}\n\nfunction App() {\n\n  const [address, setAddress] = useState(null)\n  const [filtered, setFiltered] = useState([])\n  \n  console.log(address)\n  \n  let cities = Array.from(new Set(locations.features.map(l => l.properties.City))).sort()\n  \n  const [city, setCity] = useState(null)\n  console.log(city)\n  return (\n    <div>\n      <header className=\"flex w-full justify-between content-between items-center px-3 py-2\"  style={{background: `RGBA(4, 96, 186, 0.35)`}}>\n        <div className=\"flex items-center\">\n          <FontAwesomeIcon icon={faVoteYea} size=\"lg\"/>\n          <h1 className=\"text-lg font-bold m-2\">MI-13 Early Voting Locator</h1>\n        </div>\n      </header>\n      <DropOffMap setAddress={setAddress} address={address} city={city} setCity={setCity} setFiltered={setFiltered} />\n      <section className=\"p-3 w-100 flex content-between justify-between align-middle items-center\" style={{background: `RGBA(4, 96, 186, 0.25)`}}>\n        {!address ?\n          !city ? <h2 className=\"text-lg\"><b>Enter your <i>registered voting</i> address</b> to look up your early voting location.</h2> : \n          <h2 className=\"text-xl\">Showing early voting locations in <b>{city}</b></h2> :\n          <>\n            {addressMessage(address)}\n            <button\n              className=\"bg-transparent hover:bg-red-500 text-red-700 font-semibold hover:text-white py-1 px-2 border border-red-500 hover:border-transparent rounded\"\n              onClick={() => { setAddress(null); setFiltered([]); setCity(null) }}>\n              Reset\n            </button>\n          </>}\n        <div className=\"flex items-center\">\n\n        <label for=\"city-select\" className=\"pr-3\">.. or choose your city</label>\n        <select id=\"city-select\"\n          className=\"block appearance-none w-50 bg-gray-200 border border-gray-200 text-gray-700 py-3 px-4 pr-8 rounded leading-tight focus:outline-none focus:bg-white focus:border-gray-500\"\n          value={city}\n          onChange={(e) => setCity(e.target.value)}\n          >\n          {cities.map(c => (\n            <option>{c}</option>\n            ))}\n        </select>\n            </div>\n      </section>\n      {filtered.length > 0 &&\n        <section className=\"p-3\">\n          <h2 className=\"text-xl mb-2\">\n            {filtered.length === 1 ? `Drop off your absentee ballot early at:` : `There are ${filtered.length} locations you can visit to drop off your ballot:`}\n          </h2>\n          {filtered.map(f => (\n            <Location feature={f} />\n          ))}\n\n        </section>}\n      <hr />\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport './tailwind.output.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}